file <- statement+

statement <- compound / simple

compound <- function_def / if_stmt / while_stmt / for_stmt

function_def <- "def" space identifier "(" space parameters? ")" space ":" space block
if_stmt      <- "if" space expression ":" space block (elif_block / else_block)?
elif_block   <- "elif" space expression ":" space block (elif_block / else_block)?
else_block   <- "else" space ":" space block

while_stmt   <- "while" space expression ":" block
for_stmt     <- "for" space identifier "in" space expression ":" block

block <- newline (indent statement)+

simple <- "break" / "continue" / assignment / return_stmt / expression
return_stmt <- "return" space arguments

assignment <- identifier space attr space expression
attr       <- "=" / "+=" / "-=" / "*=" / "/="

expression <- or_expr ("or" space or_expr)* newline?
or_expr    <- and_expr ("and" space and_expr)*
and_expr   <- "not" space and_expr / comparison
comparison <- sum (op_comp sum)*
sum        <- term (op_term term)* 
term       <- factor (op_factor factor)*
factor     <- power (op_power power)*
power      <- primary space / "(" space expression ")" space

op_comp   <- ("==" / "!=") space
op_term   <- ("+" / "-") space
op_factor <- ("*" / "/" / "%") space
op_power  <- "**" space

primary <- identifier space "(" space arguments ")" / atom space

atom <- "True" / "False" / "None" / number / strings / identifier
arguments <- expression (sep expression)*
parameters <- identifier space (sep identifier space)*

sep <- "," space

^strings <- fstring / string
fstring <- "f" string
string  <- ['] (!['] char)* ['] / ["] (!["] char)* ["]
-- Fazer uma forma fÃ¡cil para caracteres acentuados
char    <- [a-zA-Z0-9 :{}.]

^identifier <- [a-zA-Z] [a-zA-Z0-9_]*
^number     <- [0-9]+
space      <- " "*
^newline    <- "\r\n" / "\r" / "\n"
^indent     <- "\t" / " "+